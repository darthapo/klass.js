
(function klassWrapper(){var initializing=false,fnTest=/xyz/.test(function(){xyz;})?/\b(_super|_klass)\b/:/.*/;this.Klass=function KlassBase(name,props){if(this instanceof arguments.callee){}else{return arguments.callee.subclassAs(name,props);}};this.Klass.prototype.method=function method(){if(arguments.length==0||typeof arguments[0]!="string")
throw"You must specify a method name (as a String)";var self=this,args=Array.prototype.slice.call(arguments),name=args.shift(),meth=self[name];if(typeof meth==='function')
return function(){return meth.apply(self,args.concat(Array.prototype.slice.call(arguments)));}
else
throw"Method "+name+" not found!";};function mergeProperties(from,to,parent,self){for(var name in from){to[name]=typeof from[name]=="function"&&typeof parent[name]=="function"&&fnTest.test(from[name])?(function(name,fn){return function(){var tmp=this._super;this._super=parent[name];var ret=fn.apply(this,arguments);this._super=tmp;return ret;};})(name,from[name]):from[name];}}
Klass.subclassAs=function subclassAs(klassName,prop){if(typeof klassName=='object'&&typeof prop=='undefined'){prop=klassName;klassName='';}
var _super=this.prototype,klassIdent=(klassName||""),klassPath=klassIdent.split('.'),klassName=klassPath.pop(),klassMeths=prop['klass'],supKlasMeths=this['_staticMethods'],ctx=window;delete prop['klass'];for(var i=0;i<klassPath.length;i++){var pathSeg=klassPath[i];if(!ctx[pathSeg])ctx[pathSeg]={};ctx=ctx[pathSeg];};klassPath=klassPath.join('.');initializing=true;var prototype=new this();initializing=false;if(klassName!=''){Klass._name=klassName;Klass._ns=klassPath;Klass._fullname=klassIdent;Klass._staticMethods=klassMeths;prototype._klass=Klass;}
mergeProperties(prop,prototype,_super,this);function Klass(klassName,props){if(this instanceof arguments.callee){if(!initializing&&this.init)
this.init.apply(this,arguments);}else{arguments.callee.subclassAs(klassName,props)}}
Klass.prototype=prototype;Klass.constructor=Klass;if(supKlasMeths)mergeProperties(supKlasMeths,Klass,{},Klass);mergeProperties(klassMeths,Klass,(supKlasMeths||{}),Klass);Klass.subclassAs=arguments.callee;if(klassName!='')ctx[klassName]=Klass;return Klass;};})();